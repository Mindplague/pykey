(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{103:function(e,n,r){"use strict";r.d(n,"a",(function(){return u})),r.d(n,"b",(function(){return m}));var t=r(0),i=r.n(t);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=i.a.createContext({}),p=function(e){var n=i.a.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},u=function(e){var n=p(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},f=i.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(r),f=t,m=u["".concat(a,".").concat(f)]||u[f]||d[f]||o;return r?i.a.createElement(m,c(c({ref:n},l),{},{components:r})):i.a.createElement(m,c({ref:n},l))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,a=new Array(o);a[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:t,a[1]=c;for(var l=2;l<o;l++)a[l]=r[l];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},70:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return a})),r.d(n,"metadata",(function(){return c})),r.d(n,"rightToc",(function(){return s})),r.d(n,"default",(function(){return p}));var t=r(2),i=r(6),o=(r(0),r(103)),a={id:"neopixels",title:"NeoPixels - RGB LEDs",sidebar_label:"RGB LEDs"},c={unversionedId:"testing_hardware/neopixels",id:"testing_hardware/neopixels",isDocsHomePage:!1,title:"NeoPixels - RGB LEDs",description:"For basic information on NeoPixels and RGB LEDs, refer to this great tutorial from Adafruit",source:"@site/docs/testing_hardware/neopixel.md",slug:"/testing_hardware/neopixels",permalink:"/docs/testing_hardware/neopixels",editUrl:"https://github.com/jpconstantineau/pykey/tree/main/documentation/docs/testing_hardware/neopixel.md",version:"current",sidebar_label:"RGB LEDs",sidebar:"someSidebar",previous:{title:"Finding Key Matrix",permalink:"/docs/testing_hardware/findingmatrix"},next:{title:"Sound and Buzzers",permalink:"/docs/testing_hardware/sound"}},s=[],l={rightToc:s};function p(e){var n=e.components,r=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(t.a)({},l,r,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"For basic information on NeoPixels and RGB LEDs, refer to this great tutorial from ",Object(o.b)("a",Object(t.a)({parentName:"p"},{href:"https://learn.adafruit.com/circuitpython-essentials/circuitpython-neopixel"}),"Adafruit")),Object(o.b)("pre",null,Object(o.b)("code",Object(t.a)({parentName:"pre"},{className:"language-python"}),"import time\nimport board\nimport neopixel\nimport rainbowio\n\n# Hardware definition: GPIO where RGB LED is connected. \npixel_pin = board.P0_15\nnum_pixels = 8\n\npixels = neopixel.NeoPixel(pixel_pin, num_pixels, brightness=0.3, auto_write=False)\n\ndef rainbow_cycle(wait):\n    for j in range(255):\n        for i in range(num_pixels):\n            rc_index = (i * 256 // num_pixels) + j\n            pixels[i] = rainbowio.colorwheel(rc_index & 255)\n        pixels.show()\n        time.sleep(wait)\n\nwhile True:\n    rainbow_cycle(0.05) \n\n")))}p.isMDXComponent=!0}}]);