(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{103:function(e,t,r){"use strict";r.d(t,"a",(function(){return d})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},d=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},l=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=b(r),l=n,m=d["".concat(i,".").concat(l)]||d[l]||u[l]||o;return r?a.a.createElement(m,c(c({ref:t},s),{},{components:r})):a.a.createElement(m,c({ref:t},s))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=l;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<o;s++)i[s]=r[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}l.displayName="MDXCreateElement"},74:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return p})),r.d(t,"default",(function(){return b}));var n=r(2),a=r(6),o=(r(0),r(103)),i={id:"hardware_api",title:"PyKey Hardware API",sidebar_label:"Hardware API"},c={unversionedId:"firmware/hardware_api",id:"firmware/hardware_api",isDocsHomePage:!1,title:"PyKey Hardware API",description:"Implementation Notes",source:"@site/docs/firmware/hardware_api.md",slug:"/firmware/hardware_api",permalink:"/docs/firmware/hardware_api",editUrl:"https://github.com/jpconstantineau/pykey/tree/main/documentation/docs/firmware/hardware_api.md",version:"current",sidebar_label:"Hardware API",sidebar:"someSidebar",previous:{title:"PyKey Firmware Introduction",permalink:"/docs/firmware/firmware_intro"},next:{title:"PyKey Keymap API",permalink:"/docs/firmware/keymap_api"}},p=[{value:"Implementation Notes",id:"implementation-notes",children:[]}],s={rightToc:p};function b(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"implementation-notes"},"Implementation Notes"),Object(o.b)("p",null,"The PyKey hardware API is inspired from Adafruit's ",Object(o.b)("inlineCode",{parentName:"p"},"adafruit_macropad")," library for the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.adafruit.com/product/5128"}),"Adafruit MacroPad RP2040")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Class")," jpconstantineau_pykey.KB_Hardware"),Object(o.b)("h4",{id:"input-hardware"},"Input Hardware"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"property")," ",Object(o.b)("strong",{parentName:"p"},"encoder"),":   The rotary encoder relative rotation position. Always begins at 0 when the code is run, so the value returned is relative to the initial location."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"property")," ",Object(o.b)("strong",{parentName:"p"},"keys"),":  The keys on the keyboard. Uses events to track key number and state, e.g. pressed or released. You must fetch the events using ",Object(o.b)("inlineCode",{parentName:"p"},"keys.events.get()")," and then the events are available for usage in your code."),Object(o.b)("h4",{id:"output-hardware"},"Output Hardware"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"property")," ",Object(o.b)("strong",{parentName:"p"},"pixels"),": Sequence-like object representing the NeoPixel LEDs on the keyboard."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"property")," ",Object(o.b)("strong",{parentName:"p"},"speaker"),": Object representing a speaker or buzzer on the keyboard."),Object(o.b)("h4",{id:"usb-hid-devices"},"USB HID devices"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"property")," ",Object(o.b)("strong",{parentName:"p"},"keyboard"),": A keyboard object (adafruit_hid.keyboard) used to send HID reports. For details, see the ",Object(o.b)("inlineCode",{parentName:"p"},"Keyboard")," documentation in ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://circuitpython.readthedocs.io/projects/hid/en/latest/index.html"}),"CircuitPython HID")," "),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"property")," ",Object(o.b)("strong",{parentName:"p"},"consumer_control"),"  A consumer_control object (adafruit_hid.consumer_control) used to send HID reports. For details, see the ",Object(o.b)("inlineCode",{parentName:"p"},"consumer_control")," documentation in ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://circuitpython.readthedocs.io/projects/hid/en/latest/index.html"}),"CircuitPython HID"),"  HID Object based on adafruit_hid.consumer_control"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"property")," ",Object(o.b)("strong",{parentName:"p"},"mouse"),"  A mouse object (adafruit_hid.mouse) used to send HID reports. For details, see the ",Object(o.b)("inlineCode",{parentName:"p"},"Mouse")," documentation in ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://circuitpython.readthedocs.io/projects/hid/en/latest/index.html"}),"CircuitPython HID")," HID Object based on adafruit_hid.mouse"),Object(o.b)("h4",{id:"usb-hid-report-helpers"},"USB HID Report Helpers"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"property")," ",Object(o.b)("strong",{parentName:"p"},"keyboard_layout")," Map ASCII characters to appropriate keypresses on a  keyboard of a specific layout. For details, see the ",Object(o.b)("inlineCode",{parentName:"p"},"keyboard_layout_us")," documentation in ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://circuitpython.readthedocs.io/projects/hid/en/latest/index.html"}),"CircuitPython HID")," HID Object based on adafruit_hid.keyboard_layout_us"),Object(o.b)("p",null,"Forr other layouts use those defined ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Neradoc/Circuitpython_Keyboard_Layouts"}),"here")),Object(o.b)("h4",{id:"usb-hid-report-codes"},"USB HID Report Codes"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Keycode"),"  List of constants with all the keycodes. HID Object based on adafruit_hid.keyboard"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"ConsumerControlCode")," List of constants with all the Consumer Control Codes.  HID Object based on adafruit_hid.consumer_control_code"))}b.isMDXComponent=!0}}]);