"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[387],{3905:function(t,n,e){e.d(n,{Zo:function(){return i},kt:function(){return s}});var l=e(7294);function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,l)}return e}function u(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){r(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function d(t,n){if(null==t)return{};var e,l,r=function(t,n){if(null==t)return{};var e,l,r={},o=Object.keys(t);for(l=0;l<o.length;l++)e=o[l],n.indexOf(e)>=0||(r[e]=t[e]);return r}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(l=0;l<o.length;l++)e=o[l],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var a=l.createContext({}),c=function(t){var n=l.useContext(a),e=n;return t&&(e="function"==typeof t?t(n):u(u({},n),t)),e},i=function(t){var n=c(t.components);return l.createElement(a.Provider,{value:n},t.children)},k={inlineCode:"code",wrapper:function(t){var n=t.children;return l.createElement(l.Fragment,{},n)}},p=l.forwardRef((function(t,n){var e=t.components,r=t.mdxType,o=t.originalType,a=t.parentName,i=d(t,["components","mdxType","originalType","parentName"]),p=c(e),s=r,m=p["".concat(a,".").concat(s)]||p[s]||k[s]||o;return e?l.createElement(m,u(u({ref:n},i),{},{components:e})):l.createElement(m,u({ref:n},i))}));function s(t,n){var e=arguments,r=n&&n.mdxType;if("string"==typeof t||r){var o=e.length,u=new Array(o);u[0]=p;var d={};for(var a in n)hasOwnProperty.call(n,a)&&(d[a]=n[a]);d.originalType=t,d.mdxType="string"==typeof t?t:r,u[1]=d;for(var c=2;c<o;c++)u[c]=e[c];return l.createElement.apply(null,u)}return l.createElement.apply(null,e)}p.displayName="MDXCreateElement"},9747:function(t,n,e){e.r(n),e.d(n,{frontMatter:function(){return d},contentTitle:function(){return a},metadata:function(){return c},toc:function(){return i},default:function(){return p}});var l=e(7462),r=e(3366),o=(e(7294),e(3905)),u=["components"],d={id:"compared",title:"Versions Compared",sidebar_label:"Compared"},a=void 0,c={unversionedId:"encoderpad/compared",id:"encoderpad/compared",title:"Versions Compared",description:"Basic",source:"@site/docs/encoderpad/compared.md",sourceDirName:"encoderpad",slug:"/encoderpad/compared",permalink:"/docs/encoderpad/compared",editUrl:"https://github.com/jpconstantineau/pykey/tree/main/documentation/docs/encoderpad/compared.md",tags:[],version:"current",frontMatter:{id:"compared",title:"Versions Compared",sidebar_label:"Compared"},sidebar:"someSidebar",previous:{title:"Libraries Needed",permalink:"/docs/setup/libraries"},next:{title:"Setting up Xiao/QT Py Encoderpad",permalink:"/docs/encoderpad/basic_setting_up"}},i=[],k={toc:i};function p(t){var n=t.components,e=(0,r.Z)(t,u);return(0,o.kt)("wrapper",(0,l.Z)({},k,e,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",{colspan:"2"}),(0,o.kt)("th",{colspan:"3"},"Basic"),(0,o.kt)("th",{colspan:"3"},"Pro/Wireless"),(0,o.kt)("th",null,"RP2040/RGB"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",{colspan:"2"},"Compatible Board"),(0,o.kt)("td",null,"Seeeduino XIAO"),(0,o.kt)("td",null,"Adafruit QT Py"),(0,o.kt)("td",null,"Adafruit QT Py RP2040"),(0,o.kt)("td",null,"Pro Micro"),(0,o.kt)("td",null,"BlueMicro840 Nice!Nano"),(0,o.kt)("td",null,"Pro Micro RP2040"),(0,o.kt)("td",null,"Included on PCB")),(0,o.kt)("tr",null,(0,o.kt)("td",{rowspan:"4"},"Processor Details"),(0,o.kt)("td",null,"CPU"),(0,o.kt)("td",null,"SAMD21G18 32-bit Cortex M0+"),(0,o.kt)("td",null,"SAMD21G18 32-bit Cortex M0+"),(0,o.kt)("td",null,"RP2040 32-bit Cortex M0+"),(0,o.kt)("td",null,"ATMega32U4 8-bit AVR"),(0,o.kt)("td",null,"nRF52840 32-bit Cortex M4"),(0,o.kt)("td",null,"RP2040 32-bit Cortex M0+"),(0,o.kt)("td",null,"RP2040 32-bit Cortex M0+")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Flash "),(0,o.kt)("td",null,"256KB "),(0,o.kt)("td",null,"256KB"),(0,o.kt)("td",null,"8MB"),(0,o.kt)("td",null,"32KB"),(0,o.kt)("td",null,"1 MB"),(0,o.kt)("td",null,"16MB"),(0,o.kt)("td",null,"16MB")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"RAM "),(0,o.kt)("td",null,"32KB "),(0,o.kt)("td",null,"32KB"),(0,o.kt)("td",null,"264KB "),(0,o.kt)("td",null,"2.5 KB"),(0,o.kt)("td",null,"256 KB"),(0,o.kt)("td",null,"264KB"),(0,o.kt)("td",null,"264KB")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Other "),(0,o.kt)("td",null," "),(0,o.kt)("td",null),(0,o.kt)("td",null,"2 Cores"),(0,o.kt)("td",null),(0,o.kt)("td",null,"BLE Radio"),(0,o.kt)("td",null,"2 Cores"),(0,o.kt)("td",null,"2 Cores")),(0,o.kt)("tr",null,(0,o.kt)("td",{rowspan:"3"},"Compatible Firmware"),(0,o.kt)("td",null,"Arduino "),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"CircuitPython "),(0,o.kt)("td",null,"\u2705 "),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u274c"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Other "),(0,o.kt)("td",null," "),(0,o.kt)("td",null),(0,o.kt)("td",null),(0,o.kt)("td",null,"QMK"),(0,o.kt)("td",null,"BlueMicro_BLE, ZMK"),(0,o.kt)("td",null),(0,o.kt)("td",null)),(0,o.kt)("tr",null,(0,o.kt)("td",{rowspan:"2",colspan:"2"},"Input Features"),(0,o.kt)("td",{colspan:"3"},"9 MX Switches"),(0,o.kt)("td",{colspan:"3"},"9 MX Switches"),(0,o.kt)("td",null,"9 Hot Swap MX Switches")),(0,o.kt)("tr",null,(0,o.kt)("td",{colspan:"3"},"100 Step 60mm Rotary Encoder"),(0,o.kt)("td",{colspan:"3"},"100 Step 60mm Rotary Encoder"),(0,o.kt)("td",null,"100 Step 60mm Rotary Encoder")),(0,o.kt)("tr",null,(0,o.kt)("td",{rowspan:"2",colspan:"2"},"Feedback Features"),(0,o.kt)("td",{rowspan:"2",colspan:"3"}," None "),(0,o.kt)("td",{colspan:"3"},"9 White LEDs"),(0,o.kt)("td",{colspan:"3"},"9 RGB LEDs")),(0,o.kt)("tr",null,(0,o.kt)("td",{colspan:"3"},"Speaker"),(0,o.kt)("td",null,"Speaker")),(0,o.kt)("tr",null,(0,o.kt)("td",{rowspan:"2"},"Assembly"),(0,o.kt)("td",null,"No Soldering Needed?"),(0,o.kt)("td",null,"\u274c"),(0,o.kt)("td",null,"\u274c"),(0,o.kt)("td",null,"\u274c"),(0,o.kt)("td",null,"\u274c"),(0,o.kt)("td",null,"\u274c"),(0,o.kt)("td",null,"\u274c"),(0,o.kt)("td",null,"\u2705")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"Simple Assembly"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u2705"),(0,o.kt)("td",null,"\u274c"),(0,o.kt)("td",null,"\u274c"),(0,o.kt)("td",null,"\u274c"),(0,o.kt)("td",null,"\u2705")))))}p.isMDXComponent=!0}}]);