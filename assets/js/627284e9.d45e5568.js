"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[170],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),s=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},l=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),l=s(r),m=a,h=l["".concat(d,".").concat(m)]||l[m]||c[m]||o;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=l;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}l.displayName="MDXCreateElement"},9850:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return u},default:function(){return l}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],p={id:"hardware_api",title:"PyKey Hardware API",sidebar_label:"Hardware API"},d=void 0,s={unversionedId:"firmware/hardware_api",id:"firmware/hardware_api",title:"PyKey Hardware API",description:"Implementation Notes",source:"@site/docs/firmware/hardware_api.md",sourceDirName:"firmware",slug:"/firmware/hardware_api",permalink:"/docs/firmware/hardware_api",editUrl:"https://github.com/jpconstantineau/pykey/tree/main/documentation/docs/firmware/hardware_api.md",tags:[],version:"current",frontMatter:{id:"hardware_api",title:"PyKey Hardware API",sidebar_label:"Hardware API"},sidebar:"someSidebar",previous:{title:"Firmware Introduction",permalink:"/docs/firmware/firmware_intro"},next:{title:"Keymap API",permalink:"/docs/firmware/keymap_api"}},u=[{value:"Implementation Notes",id:"implementation-notes",children:[{value:"Input Hardware",id:"input-hardware",children:[],level:4},{value:"Output Hardware",id:"output-hardware",children:[],level:4},{value:"USB HID devices",id:"usb-hid-devices",children:[],level:4},{value:"USB HID Report Helpers",id:"usb-hid-report-helpers",children:[],level:4},{value:"USB HID Report Codes",id:"usb-hid-report-codes",children:[],level:4}],level:2}],c={toc:u};function l(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"implementation-notes"},"Implementation Notes"),(0,o.kt)("p",null,"The PyKey hardware API is inspired from Adafruit's ",(0,o.kt)("inlineCode",{parentName:"p"},"adafruit_macropad")," library for the ",(0,o.kt)("a",{parentName:"p",href:"https://www.adafruit.com/product/5128"},"Adafruit MacroPad RP2040")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Class")," jpconstantineau_pykey.KB_Hardware"),(0,o.kt)("h4",{id:"input-hardware"},"Input Hardware"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"property")," ",(0,o.kt)("strong",{parentName:"p"},"encoder"),":   The rotary encoder relative rotation position. Always begins at 0 when the code is run, so the value returned is relative to the initial location."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"property")," ",(0,o.kt)("strong",{parentName:"p"},"keys"),":  The keys on the keyboard. Uses events to track key number and state, e.g. pressed or released. You must fetch the events using ",(0,o.kt)("inlineCode",{parentName:"p"},"keys.events.get()")," and then the events are available for usage in your code."),(0,o.kt)("h4",{id:"output-hardware"},"Output Hardware"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"property")," ",(0,o.kt)("strong",{parentName:"p"},"pixels"),": Sequence-like object representing the NeoPixel LEDs on the keyboard."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"property")," ",(0,o.kt)("strong",{parentName:"p"},"speaker"),": Object representing a speaker or buzzer on the keyboard."),(0,o.kt)("h4",{id:"usb-hid-devices"},"USB HID devices"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"property")," ",(0,o.kt)("strong",{parentName:"p"},"keyboard"),": A keyboard object (adafruit_hid.keyboard) used to send HID reports. For details, see the ",(0,o.kt)("inlineCode",{parentName:"p"},"Keyboard")," documentation in ",(0,o.kt)("a",{parentName:"p",href:"https://circuitpython.readthedocs.io/projects/hid/en/latest/index.html"},"CircuitPython HID")," "),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"property")," ",(0,o.kt)("strong",{parentName:"p"},"consumer_control"),"  A consumer_control object (adafruit_hid.consumer_control) used to send HID reports. For details, see the ",(0,o.kt)("inlineCode",{parentName:"p"},"consumer_control")," documentation in ",(0,o.kt)("a",{parentName:"p",href:"https://circuitpython.readthedocs.io/projects/hid/en/latest/index.html"},"CircuitPython HID"),"  HID Object based on adafruit_hid.consumer_control"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"property")," ",(0,o.kt)("strong",{parentName:"p"},"mouse"),"  A mouse object (adafruit_hid.mouse) used to send HID reports. For details, see the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mouse")," documentation in ",(0,o.kt)("a",{parentName:"p",href:"https://circuitpython.readthedocs.io/projects/hid/en/latest/index.html"},"CircuitPython HID")," HID Object based on adafruit_hid.mouse"),(0,o.kt)("h4",{id:"usb-hid-report-helpers"},"USB HID Report Helpers"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"property")," ",(0,o.kt)("strong",{parentName:"p"},"keyboard_layout")," Map ASCII characters to appropriate keypresses on a  keyboard of a specific layout. For details, see the ",(0,o.kt)("inlineCode",{parentName:"p"},"keyboard_layout_us")," documentation in ",(0,o.kt)("a",{parentName:"p",href:"https://circuitpython.readthedocs.io/projects/hid/en/latest/index.html"},"CircuitPython HID")," HID Object based on adafruit_hid.keyboard_layout_us"),(0,o.kt)("p",null,"Forr other layouts use those defined ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Neradoc/Circuitpython_Keyboard_Layouts"},"here")),(0,o.kt)("h4",{id:"usb-hid-report-codes"},"USB HID Report Codes"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Keycode"),"  List of constants with all the keycodes. HID Object based on adafruit_hid.keyboard"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"ConsumerControlCode")," List of constants with all the Consumer Control Codes.  HID Object based on adafruit_hid.consumer_control_code"))}l.isMDXComponent=!0}}]);