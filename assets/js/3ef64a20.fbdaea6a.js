"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[318],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),f=i,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8358:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],c={id:"neopixels",title:"NeoPixels - RGB LEDs",sidebar_label:"RGB LEDs"},l=void 0,s={unversionedId:"testing_hardware/neopixels",id:"testing_hardware/neopixels",title:"NeoPixels - RGB LEDs",description:"For basic information on NeoPixels and RGB LEDs, refer to this great tutorial from Adafruit",source:"@site/docs/testing_hardware/neopixel.md",sourceDirName:"testing_hardware",slug:"/testing_hardware/neopixels",permalink:"/docs/testing_hardware/neopixels",editUrl:"https://github.com/jpconstantineau/pykey/tree/main/documentation/docs/testing_hardware/neopixel.md",tags:[],version:"current",frontMatter:{id:"neopixels",title:"NeoPixels - RGB LEDs",sidebar_label:"RGB LEDs"},sidebar:"someSidebar",previous:{title:"Finding Key Matrix",permalink:"/docs/testing_hardware/findingmatrix"},next:{title:"Sounds",permalink:"/docs/testing_hardware/sound"}},p=[],u={toc:p};function d(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"For basic information on NeoPixels and RGB LEDs, refer to this great tutorial from ",(0,o.kt)("a",{parentName:"p",href:"https://learn.adafruit.com/circuitpython-essentials/circuitpython-neopixel"},"Adafruit")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import time\nimport board\nimport neopixel\nimport rainbowio\n\n# Hardware definition: GPIO where RGB LED is connected. \npixel_pin = board.P0_15\nnum_pixels = 8\n\npixels = neopixel.NeoPixel(pixel_pin, num_pixels, brightness=0.3, auto_write=False)\n\ndef rainbow_cycle(wait):\n    for j in range(255):\n        for i in range(num_pixels):\n            rc_index = (i * 256 // num_pixels) + j\n            pixels[i] = rainbowio.colorwheel(rc_index & 255)\n        pixels.show()\n        time.sleep(wait)\n\nwhile True:\n    rainbow_cycle(0.05) \n\n")))}d.isMDXComponent=!0}}]);