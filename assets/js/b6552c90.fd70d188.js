"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[470],{3905:function(n,t,e){e.d(t,{Zo:function(){return c},kt:function(){return f}});var r=e(7294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function u(n,t){if(null==n)return{};var e,r,i=function(n,t){if(null==n)return{};var e,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var s=r.createContext({}),p=function(n){var t=r.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},c=function(n){var t=p(n.components);return r.createElement(s.Provider,{value:t},n.children)},l={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(n,t){var e=n.components,i=n.mdxType,o=n.originalType,s=n.parentName,c=u(n,["components","mdxType","originalType","parentName"]),d=p(e),f=i,m=d["".concat(s,".").concat(f)]||d[f]||l[f]||o;return e?r.createElement(m,a(a({ref:t},c),{},{components:e})):r.createElement(m,a({ref:t},c))}));function f(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var o=e.length,a=new Array(o);a[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=n,u.mdxType="string"==typeof n?n:i,a[1]=u;for(var p=2;p<o;p++)a[p]=e[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},1342:function(n,t,e){e.r(t),e.d(t,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var r=e(7462),i=e(3366),o=(e(7294),e(3905)),a=["components"],u={id:"findingbuttons",title:"Finding Buttons",sidebar_label:"Finding Buttons"},s=void 0,p={unversionedId:"testing_hardware/findingbuttons",id:"testing_hardware/findingbuttons",title:"Finding Buttons",description:"The following program will list the button GPIO names when you press the buttons.",source:"@site/docs/testing_hardware/findingbuttons.md",sourceDirName:"testing_hardware",slug:"/testing_hardware/findingbuttons",permalink:"/docs/testing_hardware/findingbuttons",editUrl:"https://github.com/jpconstantineau/pykey/tree/main/documentation/docs/testing_hardware/findingbuttons.md",tags:[],version:"current",frontMatter:{id:"findingbuttons",title:"Finding Buttons",sidebar_label:"Finding Buttons"},sidebar:"someSidebar",previous:{title:"Key Matrix",permalink:"/docs/testing_hardware/keymatrix"},next:{title:"Finding Key Matrix",permalink:"/docs/testing_hardware/findingmatrix"}},c=[],l={toc:c};function d(n){var t=n.components,e=(0,i.Z)(n,a);return(0,o.kt)("wrapper",(0,r.Z)({},l,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The following program will list the button GPIO names when you press the buttons.\nThis assumes that the buttons have one side grounded and the other connected to the controller."),(0,o.kt)("p",null,"With this list you will have a starting point on how to configure the key scanning routines."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import board\nimport time\nfrom microcontroller import Pin\nfrom digitalio import DigitalInOut, Direction, Pull\n\ndef get_unique_pins():\n    exclude = ['NEOPIXEL', 'APA102_MOSI', 'APA102_SCK']\n    pins = [pin for pin in [\n        getattr(board, p) for p in dir(board) if p not in exclude]\n            if isinstance(pin, Pin)]\n    unique = []\n    for p in pins:\n        if p not in unique:\n            unique.append(p)\n    return unique\n\npins = []\n\nfor scl_pin in get_unique_pins():\n        pin = DigitalInOut(scl_pin)\n        pin.direction = Direction.INPUT\n        pin.pull = Pull.UP\n        if pin not in pins:\n            pins.append([scl_pin, pin])\n\nwhile True:\n    for item in pins:\n        if not item[1].value :\n            print(item[0])\n    time.sleep(0.2)\n")))}d.isMDXComponent=!0}}]);